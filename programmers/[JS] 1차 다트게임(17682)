/**
 * 3번의 기회. 0~10점
 * S>**1  / D>**2 / T>**3
 * *>(score[i]+score[i-1])*2 / #> -
 * 
 * 
 * 1. 문자열을 각 시행별로 끊기 > regex > /\d{1,2}/
 * 2. 각 시행별 점수 계산
 *      (1) 옵션 X, (2) 옵션 "#", (3) 옵션 "*"
 * 3. 합산
 */

 function solution(dartResult) {
    const re = /\d{1,2}/g
    const indexes = [...dartResult.matchAll(re)].map((match)=>match.index)
    const darts = [];
    for(i=0; i<3; i++) {
        darts.push(dartResult.slice(indexes[i], indexes[i+1]));
    }

    const scores = [];
    darts.forEach((dart, i)=>{
        let score = 0;
        let multiple = 0;
        let option = "";
        const multipleTable = {
            "S": 1,
            "D": 2,
            "T": 3,
        }

        if (parseInt(dart)/10 == 1) {
            score = Number(dart.slice(0,2));
            multiple = multipleTable[dart.slice(2,3)];
            option = dart.slice(3,4);
        } else {
            score = Number(dart.slice(0,1));
            multiple = multipleTable[dart.slice(1,2)];
            option = dart.slice(2,3);
        }

        switch (option.length) {
            case 0:
                scores.push(score**multiple);
                break;
            case 1:
                if (option === "#") {
                    scores.push((score**multiple)*(-1));
                    break;
                }
                if (scores[i-1]) scores.push( scores.pop()*2 )
                scores.push((score**multiple)*2);
                break;
        }

    });

    return scores.reduce((a,b)=>a+b);
}




/**
 * 
 * dartResult를 dars로 나누는 과정이 지나치게 비효율적인거 같아서 re를 고쳐봤다.
 * 먼저, 점수만이 아닌 각 시행의 점수/배율/옵션을 한번에 색출했다.
 * 그리고 () 그루핑을 이용하여 다시 점수/배율/옵션을 분리해서 리스트화 했다.
 * 
 * 또, 옵션의 처리 과정도 배율처럼 딕셔너리를 만들어서 조건문을 한차례 줄일 수 있었다.
 * 
 */


 function solution(dartResult) {
    const re = (/\d+[SDT][#*]*/g);
    const darts = dartResult.match(re);

    console.log(darts)
 
    const multiple = { "S": 1, "D": 2, "T": 3 }
    const options = { "*": 2, "#": -1, undefined: 1 };

    const scores = [];
    darts.forEach( (dart, i) => {
        const split = dart.match(/(^\d{1,})(S|D|T)(\*|#)?/)
        const score = (split[1] ** multiple[split[2]]) * options[split[3]];

        if (darts[i-1] && split[3]==="*") {
            scores.push( scores.pop()*2 );
        }

        scores.push(score);
    });

    return scores.reduce((a,b)=>a+b);
}
