/**
 * 
 * PPAP
 * P PPAP AP > PPAP > P
 * PPAPAPP > PAPP > NP
 * 
 * regex로 PPAP를 P로 교체 > 더 이상 매칭이 없을때까지
 * 
 * 시간 제한 1초 !!
 * 
 */
 
 const rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.on("line", (line)=>{
    const re = /PPAP/g;
    
    while (line.match(/PPAP/)) {
        line = line.replace(re, "P");
    }

    const result = line === "P" ? "PPAP" : "NP";
    console.log(result);

    rl.close();
});


/**
 * 
 * 당연하게도 시간 초과가 났다
 * 재귀로 바꿨을 때 시간이 줄기는 했지만, 역시 정답은 시간 초과...
 * 
 * 어떻게 줄여야할까...
 * 문득 Array.pop()이나 Array.shift()는 시간복잡도가 1이라는 것이 생각났다.
 * 어차피 앞에서부터 PPAP을 확인할거라면 리스트에 넣고 앞에서부터 잘라서 확인하는 것이
 * 문자열 전체를 반복 검색하는거보다 빠를 것 같다.
 * 
 */

const rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.on("line", (line)=>{
    const arr = [];
    for (const char of line) {
        arr.push(char);
        if (arr.slice(-4).join("") === "PPAP") {
            arr.pop();
            arr.pop();
            arr.pop();
        }
    }
    switch (arr.join("")) {
        case "P":
            console.log("PPAP");
            break;
        default:
            console.log("NP");
            break;
    }

    rl.close();
});







import sys
input = sys.stdin.readline

arr = []
for char in input().strip():
    arr.append(char)
    
    if arr[-4:] == ["P","P","A","P"]:
        arr.pop()
        arr.pop()
        arr.pop()

print( "PPAP" if arr == ["P"] else "NP" )
