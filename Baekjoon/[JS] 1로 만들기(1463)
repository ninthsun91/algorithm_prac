/**
 * 150ms!!
 * 
 * 취할 수 있는 액션
 * - X가 3의 배수면 3으로 나눈다
 * - X가 2의 배수면 2로 나눈다
 * - 1을 뺀다
 * 
 * 
 * N (1~1000000) 1이 되기 위한 최소 연산 횟수
 * 
 * dp = [NaN, 1, 1, 1]
 * from n=2
 * dp[n+1] => dp[n+1]이 비었으면, dp[n]+1
 *            dp[n+1]이 있으면, min(dp[n+1], dp[n]+1)
 * 2*n, 3*n도 마찬가지.
 * 
 * N에 도달하면 멈추도록?
 * 
 */


const arr = [1,2,3,4,5,6,7,8]

// console.log(Math.min(arr[3], arr[3/2], arr[5/3+1], arr[5]));
// console.log(Math.min(3, undefined, 1));


// const rl = require('readline').createInterface({
//     input: process.stdin,
//     output: process.stdout,
// });

// rl.on('line', (line)=>{
//     const N = Number(line);
    
//     const dp = [0, 1, 1, 1];
//     for (let n=2; n<=N; n++) {
//         const d = dp[n];
    
//         dp[n+1] = dp[n+1] ? Math.min(dp[n+1], d+1) : d + 1;
//         dp[n*2] = dp[n*2] ? Math.min(dp[n*2], d+1) : d + 1;
//         dp[n*3] = dp[n*3] ? Math.min(dp[n*3], d+1) : d + 1;
//     }
//     console.log(dp[N]);

//     rl.close();
// });

/**
 * 
 * 100%에 다와서 틀렸다.
 * 오답이 하나 있는거 같은데 점화식이 잘못된 이유를 못잡겠다.
 * 반대로 dp[n]을 구하는 풀이가 많이 보이는데 점화식을 고쳐보기로 한다.
 * 
 * dp[n] = min( dp[n-1], dp[n/2], dp[n/3] ) +1
 * 단, n/2와 n/3의 유효성은 확인해줘야하므로, 실제로는 두번의 조건분기가 필요하다.
 * 
 */


const rl = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout,
});

rl.on('line', (line)=>{
    const N = Number(line);
    
    const dp = [0, 0, 1, 1];
    for (let n=4; n<=N; n++) {
        dp[n] = dp[n-1] + 1
        if (!(n%3)) dp[n] = Math.min( dp[n/3]+1, dp[n] );
        if (!(n%2)) dp[n] = Math.min( dp[n/2]+1, dp[n] ); 
    }
    console.log(dp[N]);

    rl.close();
});

/**
 * 
 *  n=1 일때 0인데, 1로 dp를 만들어놨었다.
 * 
 */
