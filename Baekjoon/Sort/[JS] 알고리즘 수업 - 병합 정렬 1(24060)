/**
 * 
 * 병합정렬을 할 때 각 원소가 처리되는 순서를 찾는 문제다.
 * 이 순서는 결국 merge된 모든 배열들을 처리된 순서대로 나열했을 때의 원소 순서와 같다.
 * 따라서, 먼저 병합정렬 함수를 만들고,
 * merge를 리턴하기 전에 전역변수에 각 원소들을 차례대로 push한다.
 * 
 */


const rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout,
});

const input = [];

rl.on("line", (line)=>{
    input.push(line);

    if(input.length === 2) rl.close();
});

rl.on("close", ()=>{
    const [N, K] = input[0].split(" ").map(Number);
    const A = input[1].split(" ").map(Number);

    input[2] = (N !== 1) ? [] : [A[0]];
    mergeSort(A);
    
    const result = input[2].length < K ? -1 : input[2][K-1];
    console.log(result, input[2].length);
});

function mergeSort(array) {
    const length = array.length;

    if (length !== 1) {
        const middle = Math.ceil(length/2);
        const arr1 = mergeSort(array.slice(0, middle));
        const arr2 = mergeSort(array.slice(middle, length));

        return merge(arr1, arr2);
    }
    return array;
}

function merge(arr1, arr2) {
    const tmpArray = [];

    let [i, j] = [0, 0];
    while (i<arr1.length && j<arr2.length) {
        tmpArray.push( (arr1[i] <= arr2[j]) ? arr1[i++] : arr2[j++] );
    }
    while (i<arr1.length) tmpArray.push(arr1[i++]);
    while (j<arr2.length) tmpArray.push(arr2[j++]);

    input[2].push(...tmpArray);
    return tmpArray;
}


/**
 * 
 * 처음에 문제의 예시코드를 잘 이해하지 못해서,
 * 배열을 반반씩 새 배열에 나누는 병합정렬을 짰더니 메모리와 실행시간이 조금 길었다.
 * 그래서 다시한번 문제의 예시코드에 맞게 병합정렬을 짰다.
 * 
 * 메모리 효율은 3배 정도 개선이 되었으나, 실행 시간은 오히려 4배가까이 늘어나버렸다.
 * 다른 풀이들을 비교해보았는데, 인풋을 readline으로 받냐 filesystem을 사용하냐의 차이 말고는 없어보였다.
 * 다른 문제들에서도 readline이 상대적으로 성능이 낮게 나오던 것을 감안하면 어쩔 수 없는 것으로 보인다.
 * 
 */


const rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout,
});

const input = [];

rl.on("line", (line)=>{
    input.push(line);

    if(input.length === 2) rl.close();
});

rl.on("close", ()=>{
    const [N, K] = input[0].split(" ").map(Number);
    const A = input[1].split(" ").map(Number);

    input[2] = 0;
    mergeSort(A, 0 , N-1);
    
    if (input[2] < K) console.log(-1)
});

function mergeSort(A, start, end) {
    if (start < end) {
        const middle = ((start+end)/2)|0;
        mergeSort(A, start, middle);
        mergeSort(A, middle+1, end);
        merge(A, start, middle, end);
    }
}

function merge(A, start, middle, end) {
    const tmpArray = [];
    let i = start;
    let j = middle+1;
    let t = 0;
    
    while (i<=middle && j<=end) {
        tmpArray[t++] = A[i] <= A[j] ? A[i++] : A[j++];
    }
    while (i<=middle) tmpArray[t++] = A[i++];
    while (j<=end) tmpArray[t++] = A[j++];

    i = start;
    t = 0;
    while (i<=end) {
        A[i++] = tmpArray[t++];
        input[2]++;
        if (input[2] == input[0].split(" ")[1]) {
            console.log(A[i-1]);
            break;
        }
    }
}

