/**
 * 
 * []: Array of words
 * n: index for sorting 
 * 
 * 1. 중복단어 제거
 * 1-2. 중복되는 해당 단어까지 다 제거를 해야함...
 * 1-3. Map() => word: count
 * 1-4. count !== 0  >>> delete
 * 2. n번째 문자를 기준으로 오름차순 정렬
 * 
 */



function solution(arr, n) {
    const wordMap = new Map();
    for(i=0; i<arr.length; i++) {
        if (wordMap.has(arr[i])) {
            let j = wordMap.get(arr[i]);
            wordMap.set(arr[i], ++j);
        } else {
            wordMap.set(arr[i], 0);
        }
    }

    wordMap.forEach((count, word)=>{
        if (count !== 0) {
            wordMap.delete(word);
        }
    });

    const answer = [...wordMap.keys()];
    answer.sort((a,b)=>{
        if (a[n] < b[n]) return -1;
        if (a[n] > b[n]) return 1;
        if (a[n] === b[n]) {
            if (a <= b) return -1;
            if (a > b) return 1;
            return 0;
        }
    });

    return answer;
}


const arr = ["coke", "water", "glass", "dog", "dog", "yogurt", "vitamin"]
const n = 2

console.log(solution(arr, n));




/**
 * 
 * s: 문자열. 공백으로 구분된 한개 이상의 단어
 * 짝수는 대문자, 홀수는 소문자
 * 
 * 문자열 반복
 * blank == continue
 * count%2 == 0     > lower
 * count%2 == 1     > upper
 * 
 */


 function solution(s){
	  let answer = "";
    let count = 0;
    for(i=0; i<s.length; i++) {
        if (s[i] === " ") {
            answer += s[i];
            continue;
        }

        switch (count++%2) {
            case 0:
                answer += s[i].toUpperCase();
                break;
            case 1:
                answer += s[i].toLowerCase();
                break;
        }
    }

	return answer;
}


const s= "hang hae ninety nine"
console.log(solution(s))
