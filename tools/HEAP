


/**
 * 
 * HEAP >> 정렬해서 루트노드에 최댓값/최솟값이 오도록!!
 * 
 * 
 * PUSH
 * 0. 내림차순 정렬. 담을 배열 HEAP = [];
 * 1. 배열을 입력 받음
 * 2. 이진트리로 저장
 * 3. child: << input
 *    parent: ( (heap.length-1) / 2 )|0
 * 4. if (child > parent)
 *    [parent, child] = [child, parent]
 * 5. parent index to child,
 *    new parent index
 * 6. repeat 4,5
 * 
 * 
 * POP
 * 0. return heap[1]
 * 1. heap[1] = heap.pop()
 * 2. parent = 1
 *    child = max// 2*parent 2*parent+1
 * 3. if (child > parent)
 *    swap()
 * 4. renew index
 * 5. repeat
 * 
 */

class HEAP {
    #heap = [null];
    
    push(n) {
        this.#heap.push(n);
        
        let child = this.#heap.length -1;
        let parent = (child / 2) |0;
        
        while (this.#heap[child] > this.#heap[parent] && this.#heap[parent] !== null) {
            this.#swap(parent, child);
            child = parent;
            parent = (child / 2) |0;            
        }
    }

    pop() {
        if (this.#heap.length === 1) this.#heap.pop();
        const result = this.#heap[1];

        this.#heap[1] = this.#heap.pop();
        let parent = 1;
        let child = this.#heap[2] < this.#heap[3] ? 3 : 2;

        while (this.#heap[parent] < this.#heap[child]) {
            this.#swap(parent, child);
            parent = child;
            child = this.#heap[2*parent] < this.#heap[2*parent+1] ? 2*parent+1 : 2*parent;
        }

        return result;
    }
    
    print() {
        console.log(...this.#heap);
    }
    
    max() {
        return this.#heap[1];
    }

    #swap(parent, child) {
        [this.#heap[parent], this.#heap[child]] = [this.#heap[child], this.#heap[parent]];
    }
    
}

const heapTest = new HEAP();

const array = Array.from({length: 10}, ()=>(Math.random()*100)|0);

console.log(array);
for (const n of array) {
    heapTest.push(n);
}
heapTest.print();
console.log(heapTest.max())
for (const i of Array(10)) {
    console.log(heapTest.pop())
}
